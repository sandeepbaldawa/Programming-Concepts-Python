What is SSH?
============
. SSH is a client/server based protocol 
2. An SSH server program, typically installed and run by a system administrator, accepts or rejects incoming
connections to its host computer.
3. Users then run SSH client programs, typically on
other computers, to make requests of the SSH server, such as “Please log me in,”
“Please send me a file,” or “Please execute this command.”
4. All communications between clients and servers are securely encrypted and protected from modification.
5. In summary  SSH creates a channel for running a shell on a remote computer, with end-to-end encryption between the two
systems.

How terminal devices are initialized?
=====================================
1. The system administrator creates a file, usually /etc/ttys, that has one line per terminal device. 
Each line specifies the name of the device and other parameters that are passed to the getty program.

2. When the system is bootstrapped, the kernel creates process ID 1, the init process, and it is init 
that brings the system up in multiuser mode. The init process reads the file /etc/ttys and, for every terminal 
device that allows a login, does a fork followed by an exec of the program getty.

3. It is getty that calls open for the terminal device. The terminal is opened for reading and writing.
   Once the device is open, file descriptors 0, 1, and 2 are set to the device. Then getty outputs something like login: 
   and waits for us to enter our user name. When we enter our user name, getty’s job is complete, and it then invokes 
   the login program
   
   init (ID 1) ====> init and exec ===> getty (opens file descriptors 0,1,2, reads username, initial environemnt) ==> login
              forks
4. Login compares entered password and the expected password. It also encrypts the password we enter using crypt
   Login retries on failures etc. PAM library provide authentication methods for user for which services are available.
   If we log in correctly, login will change home directory, change oenwerhip of the terminal, initialize envionment variables
   $PATH, $SHELL, $HOME, username etc. At this point, our login shell is running. Its parent process ID is the original 
   init process (process ID 1), so when our login shell terminates, init is notified (it is sent a SIGCHLD signal) and it starts the whole procedure over again for this terminal.

5. To allow the same software to process logins over both terminal logins and network logins, a software driver called a 
pseudo terminal is used to emulate the behavior of a serial terminal and map terminal operations to network operations, 
and vice versa.

What happens during SSH?
===================================
1. A client host (that is connected to the server’s host through a network of some form)
or on the same host initiates the login by starting the ssh client:

ssh hostname

2.The ssh client, calls the function getaddrinfo() to convert the 
hostname (www.linkedin.com) into its IP address. This function is called a resolver in the DNS
(Domain Name System). This function does DNS and service name lookups, and fills out the structs you need

int getaddrinfo(const char *node,     // e.g. "www.example.com" or IP
                const char *service,  // e.g. "http" or port number
                const struct addrinfo *hints,
                struct addrinfo **res);
   a. The node parameter is the host name to connect to, or an IP address.
   b. service, which can be a port number, like "80", or the name of a particular service
   (found in The IANA Port List or the /etc/services file on your Unix machine) 
   like "http" or "ftp" or "telnet" or "smtp" or whatever.
   c. hints parameter points to a struct addrinfo that you've already filled out with relevant information.
   
Details on DNS:- https://github.com/sandeepbaldawa/Programming-Concepts-Python/blob/master/sre/dns   

2a. ssh server also uses getaddrinfo() except for querying locally..

3. A network socket is opened by specificing IPV4/IPV6, TCP/UDP etc..This returns a descriptor which can be used for communication.

int socket(int domain, int type, int protocol); 

The domain argument determines the nature of the communication, including the address format(IPV4 or IPV6)
The type argument determines the type of the socket, which further determines the communication characteristics.(TCP/UDP etc.)
The protocol argument is usually zero, to select the default protocol for the given domain and socket type.

// do the lookup
// [pretend we already filled out the "hints" struct]
getaddrinfo("www.example.com", "http/ssh", &hints, &res);

s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

3a. On the server side the inetd/sshd process listens for a connection to arrive.
    It also creates a socket and uses bind() to bind the socket to a port address(22 for ssh and 80 for http)
    The port number is used by the kernel to match an incoming packet to a certain process's socket descriptor. 

    To display open ports and established TCP connections,
    netstat -vatn

    int listen(int sockfd, int backlog); 

    sockfd is the usual socket file descriptor from the socket()
    backlog is the number of connections allowed on the incoming queue(max no of incoming connections at a 
    time which can wait until accept() is done) 
    
    the sequence of system calls you'll make is:

    getaddrinfo();
    socket();
    bind();
    listen();
    /* accept() goes here */ 

4. On the client side Next step is to connect
int connect(int sockfd, struct sockaddr *serv_addr, int addrlen); 

sockfd is our friendly neighborhood socket file descriptor
serv_addr is a struct sockaddr containing the destination port and IP address
addrlen is the length in bytes of the server address structure.

All of this information can be gleaned from the results of the getaddrinfo()

4a. On the server side
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); 

1. sockfd is the listen()ing socket descriptor. 
2. addr will usually be a pointer to a local struct sockaddr_storage. 
   This is where the information about the incoming connection will go (and with it you can determine which host is calling you
   from which port). 
3. addrlen is a local integer variable that should be set to sizeof(struct sockaddr_storage) 
   before its address is passed to accept().

Client's connect() to he server machine on a port that it is listen()ing on. 
will be queued up waiting to be accept()ed. Once server calls accept() and get's the
pending connection. It'll return to you a brand new socket file descriptor to use for this single connection! 
The original one is still listening for more new connections, and the newly created one is finally ready to send() and recv(). 

You may also configure sshd to bind its listening port on a particular network interface.
By default, the port is bound on all active network interfaces on the host. The
ListenAddress keyword limits sshd to listen only on specific interfaces; the default
value is 0.0.0.0.

sshd normally runs as a daemon, listening for incoming connection requests, and
forking whenever it accepts a connection from a client. This spawns a separate child
process (a copy of the parent sshd process) to handle each session. The child process
exits when the session ends.

Alternatively, the server may be invoked by inetd or xinetd, like many other network
daemons. In this case, the general-purpose network daemon listens for and accepts
the SSH connections. It then starts a new instance of sshd for each session with the
already-connected socket attached to the standard input, output, and error streams
of sshd. Each sshd invocation is responsible for a single session.


5. Next step is the client server key management..

Step 1: Host Identification
===========================
The client machine needs to ensure that it is communicating with the remote machine 
it has been asked to by the application program, and not with another machine that is spoofing it. The server machine on the 
remote side also has the option to ensure that the user is connecting from the machine as it appears to be, and not from 
another machine that is spoofing it. This step is accomplished as outlined below:
1. The client contacts the server and requests for its public-key certificate. 
2. The client maintains a list of public keys for server machines available to it. If it is asked to contact a machine for 
  which it does not have a public key locally held, it will warn the user with a message telling that the public  key 
  reported by the server is not in the list of known hosts  and ask the user whether the user wants to continue connecting.
3. If  the  user  agrees  to  continue  connecting,  the  client  verifies  the  authenticity  of  the  Certifying Authority 
   (CA)  that  issued  the  public  key  certificate  for  the  server  and  if  satisfied,  accepts  the public keys. The 
   machine then adds the server’s public keys to its personal list of host public keys. 
4. When the administrator has included the public key for the client machine in the per-machine list of known host public keys
   on the server machine, the server may want the client machine to prove that it is what it claims to be. 
   The server  will create a “challenge” encrypted with  the  client’s host public key and send it to the client. Only a  
   genuine client machine will be able to decrypt this message with  its private key. The client then sends the same 
   challenge encrypted with the public key of the server. If the server when decrypting the message gets the same challenge 
   it sent, the client is genuine. 

An ssh-agent** is a program that keeps private keys in memory and provides authentication
services to SSH clients. The effects of the agent last until you terminate
the agent, usually just before logging out.

Once the ssh-agent is running, it’s time to load private keys into it using the ssh-add program.
By default, ssh-add** loads the key from your default identity file and decrypts the private key and loads it in memory:


Step  2:  Encryption
===================
The  objective  of  this  step  is  to  establish  a  secure  end-to-end  link  that  supports encryption of the data 
transferred. Even the password and other authentication information are encrypted and are not transmitted in plaintext. 
This step is accomplished as outlined below: 
1. Once the host identification step is successfully done, the client sends a list of encryption algorithms it could use and
their corresponding keys. This is sent encrypted with the public key of the server.
2. The server decrypts the list with its private key and chooses the strongest encryption algorithm that it could handle 
from the list sent by the client. 
3. The server then notifies the selected encryption algorithm to the client by encrypting the notification using 
its private key. 
4. The client  generates  the appropriate  secret  session key  for  the  encryption  algorithm  selected and notifies the 
session key to the server by encrypting the notification with the public key of the server.
5. The server decrypts the notification with its private key and extracts the secret session key. 

Step 3: User Authentication
===========================
In this step, the user proves to the server that he/she has the right to perform operations as a particular user on the server
machine. This is accomplished as outlined below: 
1. The client asks for the username and password from the user, encrypts them with the server’s public key and sends to the 
server. 
2. The server checks the validity of  the username and password and if  everything  is fine, accepts the connection request by 
sending the confirmation encrypted with its private key. 
3. The client decrypts the confirmation with the server’s public key and the client and server are all set to exchange data 
securely using the encryption algorithm selected and the secret session key agreed.


