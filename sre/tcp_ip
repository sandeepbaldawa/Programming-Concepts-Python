A protocol suite, such as TCP/IP, is the combination of
different protocols at various layers. TCP/IP is normally considered to be a 4-layer system,

Application (Telnet, FTP, e-mail, etc.)
Transport (TCP, UDP)
Network (IP, ICMP, IGMP)
Link (device driver and interface card)

Each layer has a different responsibility.
1. The link layer, sometimes called the data-link layer or network interface layer, normally
includes the device driver in the operating system and the corresponding network
interface card in the computer. Together they handle all the hardware details of physically
interfacing with the cable (or whatever type of media is being used).
2. The network layer (sometimes called the internet layer) handles the movement of packets
around the network. Routing of packets, for example, takes place here. IP (Internet
Protocol), ICMP (Internet Control Message Protocol), and IGMP (Internet Group
Management Protocol) provide the network layer in the TCP/IP protocol suite.
3. The transport layer provides a flow of data between two hosts, for the application layer
above. In the TCP/IP protocol suite there are two vastly different transport protocols:
TCP (Transmission Control Protocol) and UDP (User Datagram Protocol). 

TCP provides a reliable flow of data between two hosts. It is concerned with things such
as dividing the data passed to it from the application into appropriately sized chunks for
the network layer below, acknowledging received packets, setting timeouts to make
certain the other end acknowledges packets that are sent, and so on. Because this reliable
flow of data is provided by the transport layer, the application layer can ignore all these
details.

UDP, on the other hand, provides a much simpler service to the application layer. It just
sends packets of data called datagrams from one host to the other, but there is no
guarantee that the datagrams reach the other end. Any desired reliability must be added
by the application layer.

4. The application layer handles the details of the particular application. There are many
common TCP/IP applications that almost every implementation provides:
❍ Telnet for remote login,
❍ FTP, the File Transfer Protocol,
❍ SMTP, the Simple Mail Transfer protocol, for electronic mail,
❍ SNMP, the Simple Network Management Protocol, 

Link Layer
=========
|     6     |    6        |  2     |  1   | 1    | 1    |   3     |  2  |   38-1492    |  4   |   
| Dest addr | source addr | length | DSAP | SSAP |  cmd | org code| type|     data     |  CRC |



what is 3 way handshake
======================
Happens before a http request is done
- Use between client to server to see if they can even connect and speak to each other.

Client send to Server => SYNC(fundamentally meaning can I connect to you? from client)
Server send to Client => SYNC, ACK (fundamentally meaning I acknowledge you made a request and yes you can connect to me from server)
Client send to Server => ACK(fundamentally meaning server acknowledged, thanks we are now ready for all communication from client)

If SYNC/ACK not received means
1. Server is down
2. Or client blocked by firewall

How does connection end?
=======================
Once client received a http request response/file etc.

Client send to Server => FIN(fundamentally meaning am done from client)
Server send to Client => FIN, ACK (fundamentally meaning I acknowledge you made a finish request and yes you can dis-connect to me from server)
Client send to Server => ACK

What is a traceroute, and how does it work?
==========================================
understanding of ICMP, TTL, and routing hops. Bonus points if they also know UDP trace routing.

What is NAT? Where would you use it? How does it work? What are some limitations?
=================================================================================

What is QoS? How does it work? Where would you apply it? When is it enforced?

What I'm looking for: knowledge of traffic prioritization schemes, at least a vague understanding of classification levels at the header level, understanding of judicious application to time and 
latency sensitive protocols, and knowledge of contention vs. non-contention
===========================================================================


