
The kernel’s internal data structures record various pieces of information about
each process. Here are some of the more important of these:
• The process’s address space map
• The current status of the process (sleeping, stopped, runnable, etc.)
• The execution priority of the process
• Information about the resources the process has used
• Information about the files and network ports the process has opened
• The process’s signal mask (a record of which signals are blocked)
• The owner of the process

PID: process ID number
======================
The kernel assigns a unique ID number to every process.

PPID: parent PID
=================
Neither UNIX nor Linux has a system call that initiates a new process running a
particular program. Instead, an existing process must clone itself to create a new
process. The clone can then exchange the program it’s running for a different one

UID and EUID: real and effective user ID
=========================================
A process’s UID is the user identification number of the person who created it, or
more accurately, it is a copy of the UID value of the parent process. 

The EUID is the “effective” user ID, an extra UID used to determine what resources
and files a process has permission to access at any given moment

GID and EGID: real and effective group ID
=========================================
The GID is the group identification number of a process. The GID attribute of a process is largely vestigial. For purposes of access determination, a process can be a member of many groups at once.

Niceness
========
A process’s scheduling priority determines how much CPU time it receives. The
kernel uses a dynamic algorithm to compute priorities, allowing for the amount of
CPU time that a process has recently consumed and the length of time it has been
waiting to run. The kernel also pays attention to an administratively set value
that’s usually called the “nice value” or “niceness,” so called because it tells how
nice you are planning to be to other users of the system. 
