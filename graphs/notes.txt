https://www.udacity.com/wiki/creating-network-graphs-with-python
http://web.stanford.edu/class/archive/cs/cs161/cs161.1138/
https://en.wikipedia.org/wiki/Vertex_(graph_theory)
http://algs4.cs.princeton.edu/42digraph/


Topological sort applications. Application: course prerequisites, order in which to compile components of a large computer program, causalities, class inheritance, deadlocking detection, temporal dependencies, pipeline of computing jobs, check for symbol link loop, evaluate formula in spreadsheet.

Strong component applications. Applications to CAD, Markov chains (irreducible), spider traps and web search, pointer analysis, garbage collection.


1. Graphs can be represented as adjacency matrix or adjacency list.
2. Graphs can be dense or sparse.., dense is when graph E = O(V^2) and sparse is when E = O(V)
3. For dense graphs usually adjacency matrix is used and adjancecy list otherwise..


def Vertex(object):
  def __init__(self, val):
    sel.val = val
    self.neighbours = []
    
    
