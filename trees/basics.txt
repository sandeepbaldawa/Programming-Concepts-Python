- Traversal can be breadth wise or depth wise
   Breadth wise => Level order traversal
   Depthwise => Pre-order, in-order, post-order


- Height lg(n)
- BST, left is always smaller than or equal to the right element
- Binary trees have no order
- pre-order root comes first then left and right
- post-order root comes after left and right
- in-order root comes between left and right

Consider below BST, inorder is always sorted data..

        20
  10          30
5   15      25  35

pre-order => 20, 10, 5, 15, 30, 25, 35
post-order => 5, 15, 10, 25, 35, 30, 20
in-order => 5, 10, 15, 20, 25, 30, 35

inorder(Node n):
   if !n:
     return
   inorder(n.left)
   print n.data
   inorder(n.right)
   
postorder(Node n):
   if !n:
     return
   postorder(n.left)
   postorder(n.right)
   print n.data
   
pre-order(Node n):
   if !n:
     return
   print n.data
   order(n.left)
   order(n.right)   
   
 -DFS
   Uses stack
   
***Difference between compiler recursion and stack?   
In our own stack always push right first and then left if we need to process left first(LIFO while popping out)..

 - BFS
   Keep adding to queue node at a particular level
   Once we add the children of a particular node to the queue, dequeue the parent node.
   print when you dequeue, that will be level order traversal.
   
   What is the length of the queue?
   Number of leaf elements as that is the max size of queue required in BFS..
 
        A
  B          C
D   E      F  G
   
   q = new Queue()
   q.enqueue(node.root)
   while(!q.empty()):
       curr = q.dequeue()
       print curr.data
       if curr.left q.enqueue(curr.left)
       if curr.right q.enqueue(curr.right)
       
   Maximum size of queue is all the leaf nodes present..
   
   Time => O(N)
   Space => 2^h-1 => leaf nodes
   

- Difference between nodes at level 2^h and 2^(h-1)
  At every level we add +n nodes i.e.
  
           A
    B            C
 D     E       F    G
H  I  J  K   L  M  N O => Level 3, here we added 8 nodes and before this in all we had almost 8 nodes, so double the size happened at this level


 
 
 Template
 
 traverse (Node n):
     if !n:
       return n
     nleft = traverse(n.left)
     nright = traverse(n.right)
     result = (nleft, nright, n)
     return result
     
Sum of all nodes
================

Sum (Node n):
     if !n:
       return 0
     nleft = traverse(n.left)
     nright = traverse(n.right)
     result = nleft + nright + n.root
     return result
 
This template follows bottom up approach, i.e. dont process anything till we hit the bottom leaf on left..

   
#Pseudo code form a mirror of tree
'''
    4               4
  2    5   ==    5     2
1  3                3    1
'''
def mirror(n):
    if !n:
       return
     nleft = traverse(n.left)
     nright = traverse(n.right)
     n.left = nright
     n.right = nleft
     return n
     
   2                   
1     3
 
 to

     2
  2   3
 1  3
1 
i.e. mirror self on the left.. 


Every node producing a self on the left
=======================================
def growDouble(n):
    if !n:
       return
     growDouble(n.left)
     growDouble(n.right)
     tmp = n.left
     n.left = node(n.data)
     n.left.left = temp
     return n

Insert element in a BST
=======================
def Insert(Node n, Value r):
    if !n:
       n = Node(r)
    else:
        if r < n.left.data:
           n.left = Insert(n.left, r)
        else:   
           n.right = Insert(n.right, r)
    return n

- In BST data does not tell the exact structure, you would need atleast two things to be known in Pre-Order, Post-Order and In-Order.

Find min in BST
=============
- Left most leaf
- Space (uses stack so no space used by algorithm), but implementation detail space used is  O(lg N) i.e. height

Maximum value in a tree
=======================
from print_tree import *
def getMax(n):
    if not n:
       return -1
    nleft = getMax(n.left)
    nright = getMax(n.right)
    return max(nleft, nright, n.entry)


t = BinTree(6, BinTree(2, BinTree(0), BinTree(4)), BinTree(10, BinTree(8), BinTree(12)))
print getMax(t)
       
In BST pre-decessor and sucessor are
====================================
pre-decessor 
if current node has children:
    max of left tree (greatest among all nos lesser than current node)
else:
    keep going up until you find a node less than current node

sucessor
if current node has children:
    min of right tree (smallest among all nos greater than current node)
else:
    keep going up until you find a node greater than current node
    
Delete some node
================
Find the predecessor of the node to be delete and replace it with the deleted node.
Delete the predecessor from the left subtree

BPlus tree
==========
Reply on range of values to compare, Binary trees require one value to compare (more like n ary tree)
 Last level is the disk i.e. sequential access i.e. linkedlist
 Higher levels are in RAM, or more faster memory, which helps us to point to a particular node in the last level i.e. linkedlist
 
 examples where trees are used
 =============================
 google maps, version control, BPlus tree
 
 
 Template modifications
 ======================
 To solve using return values use
 
 Template1
 =========
 
 traverse (Node n):
     if !n:
       return n
     nleft = traverse(n.left)
     nright = traverse(n.right)
     result = (nleft, nright, n)
     return result
     
To solve using passed parameters
1. Define a global parameter result
2. Pass it to the recursive call
3. We process result before recursing


Template2
=========
traverse (Node n, result):
     if !n:
       return n
     if n % 2:
       result += 1  
     traverse(n.left, result)
     traverse(n.right, result)

See example https://github.com/sandeepbaldawa/Programming-Concepts-Python/blob/master/trees/sum_left_leaves.py
